    1 ch=$1000:cl=$1800
    5 goto 50000:rem jump to start of progrm
   10 rem *** title screen ***
   11 bx%=-35:sx%=80:print "{clr}";
   12 gosub 1800:rem clear screen buffer
   15 o%=20:x%=bx%:y%=1:gosub 500
   17 o%=21:x%=sx%:y%=19:gosub 500
   18 gosub 1700:rem copy scrbuf to screen
   20 bx%=bx%+1:sx%=sx%-1
   25 get a$:if a$<>"" then goto 50
   27 if bx%=90 then bx%=-35:sx%=80
   30 goto 12
   50 of%=0
   60 gs%=gs%+1
   70 return
  500 rem *** draw object o% at x% , y% (with crop and transparency) ***
  510 p% = ob%(o%):bank 4
  520 w% = peek(p%) : p%=p%+1
  525 dw% = w% + x% - 1
  530 h% = peek(p%) : p%=p%+1
  535 dh% = h% + y% - 1
  540 for dy% = y% to dh%
  550 if dy% < 0 then p%=p%+w%:goto 600
  560 for dx% = x% to dw%
  570 if dx% < 0 or dx% > 79 then p%=p%+1:goto 590
  575 bank 4:c% = peek(p%):p%=p%+1
  580 if c%<>32 then bank 4:poke ch + dx% + dy% * 80, c%
  590 next dx%
  600 next dy%
  610 rem now to the colours...
  620 for dy% = y% to dh%
  630 if dy% < 0 then p%=p%+w%:goto 690
  640 for dx% = x% to dw%
  650 if dx% < 0 or dx% >79 then p%=p%+1:goto 680
  660 bank 4:c% = peek(p%):p%=p%+1
  670 bank 4:oc% = peek(ch+dx%+dy%*80):if oc%<>32 then poke cl+dx%+dy%*80,c%
  680 next dx%
  690 next dy%
  695 return
  700 rem *** draw map of tiles ***
  710 for zy% = 0 to 12
  715 if zy%<=0 or zy%> 12 then goto 920
  720 for zx% = 1 to 15
  730 o%=0:c$=mid$(lv$(zy%),zx%,1)
  740 if c$="L" then o%=1
  750 if c$="{SHIFT-@}" then o%=2
  760 if c$="O" then o%=3
  770 if c$="P" then o%=4
  780 if c$="{CBM-P}" then o%=5
  790 if c$="{CBM-T}" then o%=6
  800 if c$="{CBM-G}" then o%=7
  810 if c$="{CBM-M}" then o%=8
  820 if c$="K" then o%=9
  830 if c$="J" then o%=10
  840 if c$="I" then o%=11
  850 if c$="U" then o%=12
  860 if c$="x" then o%=13
  870 if c$="#" then o%=14
  880 if c$="." then o%=19
  900 if o%<>0 then x%=zx%*5:y%=zy%*5-of%:gosub 500
  904 rem print "{home}                                    ";
  905 rem print "{home}zx=";zx%;" zy=";zy%;" c$=";c$;"   ";
  907 rem getkey a$
  910 next zx%
  920 next zy%
  930 return
 1000 rem *** start level ***
 1010 ch=$2000:cl=$4000
 1011 px%=39:py%=21
 1015 gosub 1900:rem clear map
 1020 s$="loading level 1..."
 1030 print "{clr}";
 1040 x%=33:y%=11:gosub 1500
 1045 gosub 700:rem copy tiles into map
 1047 s$="level 1 ready!    "
 1048 x%=33:y%=11:gosub 1500
 1050 get k$:if k$="" then pk=pk+1:goto 1048
 1060 foreground 1
 1070 gs%=gs%+1
 1080 return
 1500 rem *** sub: print rainbow string(x%,y%,pk,s$) ***
 1510 cursor x%,y%
 1520 for k=1 to len(s$)
 1530 c$=mid$(s$,k,1)
 1540 foreground mod(k-1+pk,16)+16:print c$;
 1550 next k
 1560 for k=0 to (20-len(s$))*10:next k
 1570 return
 1700 rem *** dma copy from screen buffer to screen ***
 1710 dma 0, $7d0, $1050, 4, $0850, 0
 1720 dma 0, $7d0, $1850, 4, $f850, 1
 1730 return
 1800 rem *** dma clear screen buffer ***
 1810 dma 3, $7d0, 32, 0, $1000, 4
 1820 dma 3, $7d0, 0, 0, $1800, 4
 1830 return
 1900 rem *** dma clear map ***
 1910 dma 3, $2000, 32, 0, $2000, 4
 1920 dma 3, $2000, 0, 0, $4000, 4
 1930 return
 2000 rem *** draw lives/score/hiscore ***
 2010 print "{home}energy: {rvon}           {rvof}  score: 12340    hiscore: 00000 "
 2020 return
 3000 rem *** draw background tiles ***
 3020 if of%<0 then return
 3030 sr=$2000+80*of%:de=$1050:le=$780:tr%=32:gosub 50700:rem transparentdma
 3040 sr=$4000+80*of%:de=$1850:le=$780:tr%=0:gosub 50700:rem transparentdma
 3070 return
 4000 rem *** draw stars ***
 4005 bank 4
 4010 for k=0 to 10
 4020 poke $1000+ry%(k)*80+rx%(k),46
 4030 poke $1800+ry%(k)*80+rx%(k),1
 4040 ry%(k)=ry%(k)+rv%(k)
 4050 if ry%(k) > 24 then ry%(k) = ry%(k)-23:rx%(k)=int(rnd(1)*25)*3+1
 4060 next k
 4070 return
 5000 rem *** draw baddies ***
 5010 return
 6000 rem *** draw players ***
 6005 ch=$1000:cl=$1800
 6010 o%=18:x%=px%:y%=py%:gosub 500
 6020 return
 7000 rem *** draw fire ***
 7010 return
 8000 rem *** check input ***
 8010 get k$
 8020 if k$="a" then px%=px%-2:if px%<0 then px%=0
 8030 if k$="d" then px%=px%+2:if px%>76 then px%=76
 8040 if k$="w" then of%=of%-1
 8050 if k$="s" then of%=of%+1
 8060 return
 9000 rem *** check collisions ***
 9010 return
 10000 rem *** main game loop ***
 10010 gosub 2000:rem draw lives/score/hiscore
 10015 gosub 1800:rem clear scrbuf
 10020 gosub 4000:rem draw stars
 10030 gosub 3000:rem draw background tiles
 10040 gosub 5000:rem draw baddies
 10050 gosub 6000:rem draw players
 10060 gosub 7000:rem draw fire
 10070 gosub 8000:rem check input
 10080 gosub 9000:rem check collisions
 10110 rem *** page flip ***
 10120 gosub 1700:rem copy scrbuf to screen
 10125 rem sleep 0.05
 10130 return
 50000 gs%=1:rem 1=init,2=title,3=startlevel,4=maingame,5=endlevel,6=game over
 50005 on gs% gosub 50100,10,1000,10000,15000,20000
 50010 goto 50005
 50100 rem *** init game data ***
 50105 bank 4:p = 0:dim lv$(13)
 50106 dim rx%(10):dim ry%(10):dim rv%(10):fork=0to10:rx%(k)=int(rnd(1)*25)*3+1:ry%(k)=rnd(1)*22+2:rv%(k)=rnd(1)*3+1:next k:rem stars
 50107 background 0:border 0
 50108 gosub 50500:rem init transparent dma struct
 50110 dim ob%(21):rem ptrs to object data
 50120 for k = 1 to 21
 50125 ob%(k)=p
 50130 read w:poke p,w:p=p+1
 50135 read h:poke p,h:p=p+1
 50140 for d = 1 to w*h*2
 50150 read v: poke p, v: p=p+1
 50160 next d
 50170 next k
 50175 gs%=gs%+1
 50180 rem read level data
 50190 for k = 0 to 12
 50200 read lv$(k)
 50210 next k
 50220 return
 50500 rem *** init transparent dma struct ***
 50510 bank 4
 50520 poke $ff0,$07:rem opt = enable transparency
 50530 poke $ff1,$86:rem opt = set transparency
 50540 poke $ff2,$20:rem       (transparency value)
 50550 poke $ff3,$00:rem end of options
 50560 poke $ff4,$00:rem copy
 50565 pokew $ff5,$0000:rem length
 50570 pokew $ff7,$1000:rem source addr
 50580 poke $ff9,$04:rem source bank
 50590 pokew $ffa,$1000:rem dest addr
 50600 poke $ffc,$04:rem dest bank
 50610 poke $ffd,$00:rem cmd msb (ignore)
 50620 pokew $ffe,$0000:rem modulo (ignore)
 50630 return
 50700 rem *** do transparent dma(sr,de,le,tr%) ***
 50710 bank 4
 50720 pokew $ff7,sr:rem source addr
 50730 pokew $ffa,de:rem dest addr
 50740 pokew $ff5,le:rem length
 50750 poke $ff2,tr%:rem transparency value
 50755 bank 128
 50760 poke $d702,4:rem dma list in bank 4
 50770 poke $d701,$0f:rem dmalist msb
 50780 poke $d705,$f0:rem dmalist lsb
 50790 return
 51000 rem *** obj1 = tile bl ***
 51010 data 5,5:rem w,h
 51020 data 102,174,186,174,186,102,186,174,186,174,102,174,186,174,186,102,186,174,186,174,124,102,102,102,102
 51030 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51040 rem *** obj2 = tile br ***
 51050 data 5,5
 51060 data 174,186,174,186,102,186,174,186,174,102,174,186,174,186,102,174,186,174,186,102,102,102,102,102,126
 51070 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51080 rem *** obj3 = tile tl ***
 51090 data 5,5
 51100 data 108,102,102,102,102,102,186,174,186,174,102,174,186,174,186,102,186,174,186,174,102,174,186,174,186
 51110 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51120 rem *** obj4 = tile tr ***
 51130 data 5,5
 51140 data 102,102,102,102,123,186,174,186,174,102,174,186,174,186,102,186,174,186,174,102,174,186,174,186,102
 51150 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51160 rem *** obj5 = tile b ***
 51170 data 5,5
 51180 data 174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,102,102,102,102,102
 51190 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51200 rem *** obj6 = tile t ***
 51210 data 5,5
 51220 data 102,102,102,102,102,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174
 51230 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51240 rem *** obj7 = tile l ***
 51250 data 5,5
 51260 data 102,186,174,186,174,102,174,186,174,186,102,186,174,186,174,102,174,186,174,186,102,186,174,186,174
 51270 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51280 rem *** obj8 = tile r ***
 51290 data 5,5
 51300 data 174,186,174,186,102,186,174,186,174,102,174,186,174,186,102,186,174,186,174,102,174,186,174,186,102
 51310 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51320 rem *** obj9 = dia br ***
 51330 data 5,5
 51340 data 186,174,186,174,102,174,186,174,102,126,186,174,102,126,32,174,102,126,32,32,102,126,32,32,32
 51350 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,1,1,9,9,1,1,1
 51360 rem *** obj10 = dia bl ***
 51370 data 5,5
 51380 data 102,174,186,174,186,124,102,174,186,174,32,124,102,174,186,32,32,124,102,174,32,32,32,124,102
 51390 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,1,1,1,9,9
 51400 rem *** obj11 = dia tr ***
 51410 data 5,5
 51420 data 102,123,32,32,32,174,102,123,32,32,186,174,102,123,32,174,186,174,102,123,186,174,186,174,102
 51430 data 9,9,1,1,1,9,9,9,1,1,9,9,9,9,1,9,9,9,9,9,9,9,9,9,9
 51440 rem *** obj12 = dia tl ***
 51450 data 5,5
 51460 data 32,32,32,108,102,32,32,108,102,174,32,108,102,174,186,108,102,174,186,174,102,174,186,174,186
 51470 data 1,9,9,9,9,1,1,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51480 rem *** obj13 = turret ***
 51490 data 5,5
 51500 data 160,105,120,95,160,105,233,194,223,95,117,195,219,195,118,223,95,194,105,233,160,223,98,233,160
 51510 data 5,5,5,5,5,5,3,3,3,5,5,3,3,3,5,5,3,3,3,5,5,5,5,5,5
 51520 rem *** obj14 = turret shot ***
 51530 data 5,5
 51540 data 160,236,120,251,160,160,108,102,123,160,97,102,32,102,225,160,124,102,126,160,160,252,98,254,160
 51550 data 5,5,5,5,5,5,12,12,12,5,5,12,5,12,5,5,12,12,12,5,5,5,5,5,5
 51560 rem *** obj15 = baddie1 ***
 51570 data 4,3
 51580 data 233,160,160,223,95,209,209,105,85,91,91,73
 51590 data 64,2,2,64,65,65,65,65,67,66,66,67
 51600 rem *** obj16 = baddie2 ***
 51610 data 4,3
 51620 data 107,42,42,115,124,91,91,126,78,66,66,77
 51630 data 76,76,76,76,78,78,78,78,68,67,67,68
 51640 rem *** obj17 = rock ***
 51650 data 4,3
 51660 data 108,174,160,123,230,230,174,160,124,230,230,126
 51670 data 1,15,12,11,1,15,12,11,1,15,12,11
 51680 rem *** obj18 = ship ***
 51690 data 4,3
 51700 data 30,233,223,30,233,195,195,223,105,105,95,95
 51710 data 2,73,74,2,72,73,74,6,72,73,74,75
 51720 rem *** obj19 = tile . ***
 51730 data 5,5
 51740 data 174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174,186,174
 51750 data 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
 51760 rem *** obj20 = 'battle' ***
 51770 data 34,5
 51780 data 233,160,160,160,160,32,233,160,160,160,223,32,233,160,160,160,105,32,233,160,160,160,105,32,233,32,32,32,32,233,160,160,160,105
 51790 data 160,32,32,233,160,32,160,105,32,233,160,32,32,32,160,32,32,32,32,32,160,32,32,32,160,32,32,32,32,160,32,32,32,32
 51800 data 160,160,160,160,195,32,160,160,160,160,160,32,32,32,160,32,32,32,32,32,160,32,32,32,160,32,32,32,32,160,160,105,32,32
 51810 data 160,32,32,233,160,32,160,105,32,233,160,32,32,32,160,32,32,32,32,32,160,32,32,32,160,32,32,32,32,160,32,32,32,32
 51820 data 160,160,160,160,105,32,105,32,32,160,105,32,32,32,105,32,32,32,32,32,105,32,32,233,160,160,160,105,233,160,160,160,105,32
 51830 data 64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,66,66,66,66,64,64,64,64,64
 51840 data 65,66,66,65,65,66,65,65,66,65,65,66,66,66,65,66,66,66,66,66,65,66,66,66,65,66,66,66,66,65,66,66,66,66
 51850 data 66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
 51860 data 67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67
 51870 data 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
 51880 rem *** obj21 = 'sparrow' ***
 51890 data 42,5
 51900 data 233,160,160,160,105,32,233,160,160,160,105,32,233,160,160,160,223,32,233,160,160,160,105,32,233,160,160,160,105,32,233,160,160
 51910 data 160,105,32,233,105,32,32,233,105,160,32,32,32,32,32,160,105,32,160,32,32,160,105,32,233,160,32,160,105,32,160,32,32,160,105,32
 51920 data 160,32,32,160,32,32,160,32,32,160,32,32,32,160,32,160,160,160,160,105,32,160,160,160,105,32,32,160,160,160,160,160,32,160,160
 51930 data 160,105,32,32,160,160,160,105,32,32,160,32,32,160,32,32,160,32,233,32,160,32,32,233,160,105,32,32,160,32,32,32,32,32,160,105,32
 51940 data 233,160,32,160,32,160,223,32,32,160,32,160,223,32,32,160,32,32,160,32,32,160,32,160,32,160,32,160,160,105,32,32,32,105,32,32,32
 51950 data 32,32,105,32,32,160,105,32,105,32,95,160,32,32,105,32,95,160,32,233,160,160,160,105,32,233,160,160,105,160,105,32
 51960 data 64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,64,64,64,64,66,64,64,66,66,64,64
 51970 data 65,66,66,66,66,66,65,65,66,65,66,66,65,65,66,65,65,66,65,65,65,65,66,66,65,65,66,65,66,66,65,66,66,65,66,66,65,66,66,66,65,66
 51980 data 66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
 51990 data 66,67,67,67,66,66,67,66,66,66,66,66,67,67,66,67,67,66,67,66,67,67,66,66,67,66,67,67,66,66,67,66,66,67,66,66,67,66,67,66,67,66
 52000 data 1,1,1,66,66,66,1,66,66,66,66,66,1,66,66,1,1,66,1,66,1,1,66,66,1,66,1,1,66,1,1,1,1,1,66,1,1,1,1,1,1,66
 53000 rem *** level 1 ***
 53010 data "               "
 53020 data " O{CBM-T}{CBM-T}{CBM-T}{CBM-T}{CBM-T}P UI  UI"
 53030 data " {CBM-G}x.{CBM-P}.x{CBM-M} JxIUxK"
 53040 data " J{CBM-P}K J{CBM-P}K  JxxK "
 53050 data "          UxxI "
 53060 data "  U{CBM-T}I    UxKJxI"
 53070 data "  {CBM-G}x{CBM-M}    JK  JK"
 53080 data "  {CBM-G}xxI         "
 53090 data "  J{CBM-P}xxI        "
 53100 data "    Jxx{CBM-T}{CBM-T}{CBM-T}{CBM-T}{CBM-T}{CBM-T}{CBM-T}I"
 53110 data "     J.x.x.x.x{CBM-M}"
 53120 data "      J{CBM-P}{CBM-P}{CBM-P}{CBM-P}{CBM-P}{CBM-P}{CBM-P}K"
 53130 data ""
